"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _createForOfIteratorHelper(t,e){var n,r,o,i,u="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(u)return r=!(n=!0),{s:function(){u=u.call(t)},n:function(){var t=u.next();return n=t.done,t},e:function(t){r=!0,o=t},f:function(){try{n||null==u.return||u.return()}finally{if(r)throw o}}};if(Array.isArray(t)||(u=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length)return u&&(t=u),i=0,{s:e=function(){},n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var n;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(n="Object"===(n=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(t,e):void 0}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_toPropertyKey(r.key),r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0===n)return("string"===e?String:Number)(t);n=n.call(t,e||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(n);return _possibleConstructorReturn(this,r?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var n="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,n){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,n){var r=[null];r.push.apply(r,e);e=new(Function.bind.apply(t,r));return n&&_setPrototypeOf(e,n.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}!function r(o,i,u){function c(e,t){if(!i[e]){if(!o[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(a)return a(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}n=i[e]={exports:{}},o[e][0].call(n.exports,function(t){return c(o[e][1][t]||t)},n,n.exports,r,o,i,u)}return i[e].exports}for(var a="function"==typeof require&&require,t=0;t<u.length;t++)c(u[t]);return c}({1:[function(t,e,n){var r=function(){_inherits(e,_wrapNativeSuper(HTMLElement));var t=_createSuper(e);function e(){return _classCallCheck(this,e),t.call(this)}return _createClass(e,[{key:"connectedCallback",value:function(){var t,e=this,n=(this.openButton=this.querySelector(".js-localization__button"),this.input=this.querySelector(".js-localization__input"),this.languageLinks=this.querySelectorAll(".js-localization__link"),this.openButton.addEventListener("click",function(){return e.toggleMenu()}),this.openButton.addEventListener("focusout",function(){return e.closeMenu()}),_createForOfIteratorHelper(this.languageLinks));try{for(n.s();!(t=n.n()).done;)t.value.addEventListener("click",this.onItemClick.bind(this))}catch(t){n.e(t)}finally{n.f()}}},{key:"disconnectedCallback",value:function(){var t,e=this,n=(this.openButton.removeEventListener("click",function(){return e.toggleMenu()}),this.openButton.removeEventListener("focusout",function(){return e.closeMenu()}),_createForOfIteratorHelper(this.languageLinks));try{for(n.s();!(t=n.n()).done;)t.value.removeEventListener("click",this.onItemClick.bind(this))}catch(t){n.e(t)}finally{n.f()}}},{key:"toggleMenu",value:function(){this.openButton.nextElementSibling.classList.toggle("c-localization__list--active")}},{key:"closeMenu",value:function(){this.openButton.nextElementSibling.classList.remove("c-localization__list--active")}},{key:"onItemClick",value:function(t){t.preventDefault();var e=this.querySelector("form");this.input.value=t.currentTarget.dataset.value,e&&e.submit()}}]),e}(),o=function(){_inherits(e,_wrapNativeSuper(HTMLElement));var t=_createSuper(e);function e(){return _classCallCheck(this,e),t.call(this)}return _createClass(e,[{key:"connectedCallback",value:function(){this.inputLang=this.querySelector(".js-localization__input--lang"),this.selectLang=this.querySelector(".js-localization__select"),this.inputCurrency=this.querySelector(".js-localization__input--currency"),this.selectCurrency=this.querySelector(".js-currency__select"),this.selectLang.addEventListener("change",this.onLangChange.bind(this)),this.selectCurrency.addEventListener("change",this.onCurrencyChange.bind(this))}},{key:"disconnectedCallback",value:function(){this.selectLang.removeEventListener("change",this.onLangChange.bind(this)),this.selectCurrency.removeEventListener("change",this.onCurrencyChange.bind(this))}},{key:"onLangChange",value:function(t){var e=this.querySelector("form");this.inputLang.value=t.currentTarget.value,e&&e.submit()}},{key:"onCurrencyChange",value:function(t){var e=this.querySelector("form");this.inputCurrency.value=t.currentTarget.value,e&&e.submit()}}]),e}();customElements.define("localization-form",r),customElements.define("localization-select-form",o)},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
